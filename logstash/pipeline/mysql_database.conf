# Configuração de entrada (input) para o plugin JDBC, que permite a ingestão de dados de um banco de dados MySQL.
input {
  jdbc {
    # A string de conexão JDBC que especifica o endereço do banco de dados, o número da porta e o nome do banco de dados.
    jdbc_connection_string => "jdbc:mysql://mysql_database:3306/mydatabase?useSSL=true"
    
    # O nome de usuário usado para autenticar a conexão com o banco de dados.
    jdbc_user => "myuser"
    
    # A senha associada ao usuário usado para autenticar a conexão com o banco de dados.
    jdbc_password => "mypassword"
    
    # Indica se o Logstash deve validar a conexão com o banco de dados antes de iniciar a pipeline.
    jdbc_validate_connection => true
    
    # O caminho para a biblioteca do driver JDBC que será utilizada para a conexão com o MySQL.
    jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/mysql-connector-j-8.3.0.jar"
    
    # A classe do driver JDBC para o MySQL.
    jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
    
    # O tamanho da página a ser utilizado para recuperar dados do banco de dados em partes.
    jdbc_page_size => "200"
    
    # A consulta SQL que será executada para obter dados do banco de dados.
    statement => "SELECT * from produtos"
    
    # A programação (cron expression) que determina a frequência com que a consulta SQL será executada.
    schedule => "*/1 * * * *"
  }
}

# Configuração de saída (output) para enviar dados para o Elasticsearch e para a saída padrão (stdout).
output {
  # Configuração da saída para o Elasticsearch, especificando o endereço, usuário, senha e índice.
  elasticsearch {
    hosts => "elasticsearch:9200"
    user => "elastic"
    password => "changeme"
    index => "mysql_database"
    
    # O codec a ser utilizado para codificar os eventos, neste caso, JSON.
    codec => json
  }
  
  # Configuração da saída para a saída padrão (console), utilizando o codec JSON para formatar a saída.
  stdout { codec => json_lines }
}
