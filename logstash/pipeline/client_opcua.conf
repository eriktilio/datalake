# Configuração de entrada (input) para o plugin HTTP, que permite a ingestão de eventos via protocolo HTTP na porta 8080.
input {
  http {
    port => 8080
  }
}

# Configuração do filtro (filter) para processar eventos recebidos via HTTP.
filter {
  # O plugin JSON é usado para analisar mensagens em formato JSON.
  json {
    source => "message"
    target => "parsed_message"
  }

  # Condição para verificar se o parsing JSON foi bem-sucedido.
  if [parsed_message] {
    # O plugin Mutate é usado para adicionar e remover campos nos eventos.
    mutate {
      # Adiciona novos campos "pressao" e "@timestamp" com base nos valores extraídos do JSON.
      add_field => {
        "pressao" => "%{[parsed_message][pressao]}"
        "@timestamp" => "%{[parsed_message][timestamp]}"
      }
      # Remove o campo temporário "parsed_message" após a extração dos campos desejados.
      remove_field => ["parsed_message"]
    }
  }
}

# Configuração de saída (output) para enviar os eventos processados para o Elasticsearch e para a saída padrão (stdout).
output {
  # Configuração de saída para o Elasticsearch, especificando o endereço, usuário, senha, índice e codec para os eventos.
  elasticsearch {
    hosts => "${ELASTIC_HOST}"
    user => "${ELASTIC_USER}"
    password => "${ELASTIC_PASSWORD}"
    index => "client_opcua"
    codec => json
  }

  # Configuração de saída para a saída padrão (console), utilizando o codec RubyDebug para formatar a saída.
  stdout {
    codec => rubydebug
  }
}
