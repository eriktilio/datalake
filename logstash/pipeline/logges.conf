# Configuração de entrada (input) para o plugin File, que permite a leitura de dados de um arquivo de log.
input {
  file {
    # O caminho do diretório contendo os arquivos de log.
    path => "/files/logs/*.log"
    
    # A posição inicial a partir da qual o Logstash começará a ler os arquivos de log.
    start_position => "beginning"
    
    # O caminho para o sincedb, um banco de dados de estado para rastrear a posição dos arquivos de log.
    sincedb_path => "/dev/null"
    
    # Uma identificação única para este input, que pode ser útil para gerenciamento e depuração.
    id => "logges"
    
    # Adiciona um campo "index" aos eventos, útil para especificar o índice no Elasticsearch.
    add_field => {"index" => "logges"}
  }
}

# Configuração do filtro (filter) para processar os eventos lidos do arquivo de log.
filter {
  # O plugin Grok é usado para extrair campos de texto não estruturado.
  grok {
    # A expressão regular para fazer o parsing do formato do log e extrair informações.
    match => { "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\] %{LOGLEVEL:level}: %{GREEDYDATA:message}" }
    
    # Sobrescreve o campo "message" com a informação extraída usando a expressão regular.
    overwrite => [ "message" ]
  }
  
  # O plugin Date é usado para analisar o campo de timestamp e criar um campo "@timestamp" para o Elasticsearch.
  date {
    # As informações de formato do timestamp para a correspondência correta.
    match => [ "timestamp", "yyyy-MM-dd HH:mm:ss" ]
    
    # O campo no qual o timestamp analisado será armazenado.
    target => "@timestamp"
  }
}

# Configuração de saída (output) para enviar os dados processados para o Elasticsearch e para a saída padrão (stdout).
output {
  # Configuração de saída para o Elasticsearch, especificando o endereço, usuário, senha, índice e codec.
  elasticsearch {
    hosts => "elasticsearch:9200"
    user => "elastic"
    password => "changeme"
    index => "logges"
    
    # O codec a ser utilizado para codificar os eventos, neste caso, JSON.
    codec => json
  }
  
  # Configuração de saída para a saída padrão (console), utilizando o codec RubyDebug para formatar a saída.
  stdout {
    codec => rubydebug
  }
}
