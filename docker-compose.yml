version: "3.7"

services:
  elasticsearch:
    build:
      context: ./elasticsearch
      dockerfile: Dockerfile
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: elasticsearch
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch:/usr/share/elasticsearch/data:Z
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      discovery.type: single-node
    networks:
      - datalake
    restart: unless-stopped

  logstash:
    build:
      context: ./logstash
      dockerfile: Dockerfile
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: logstash
    volumes:
      - ./logstash/config:/usr/share/logstash/config/:ro,Z
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
      - ./logstash/files:/files/
    ports:
      - 8080:8080
      - 5044:5044
      - 50000:50000/tcp
      - 50000:50000/udp
      - 9600:9600
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      ELASTIC_HOST: ${ELASTIC_HOST}
      ELASTIC_USER: ${ELASTIC_USER}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
    networks:
      - datalake
    depends_on:
      - elasticsearch
    restart: unless-stopped

  opc_data_generator:
    build:
      context: ./opc_data_generator
      dockerfile: Dockerfile
    container_name: opc_data_generator
    ports:
      - 4840:4840
    networks:
      - datalake
    restart: unless-stopped

  client_opcua:
    build:
      context: ./client_opcua
      dockerfile: Dockerfile
      args:
        LOGSTASH_URL: ${LOGSTASH_URL}
        OPC_DATA_URL: ${OPC_DATA_URL}
    container_name: client_opcua
    networks:
      - datalake
    restart: unless-stopped

  mysql_database:
    image: mysql:8.3
    container_name: mysql_database
    ports:
      - 3306:3306
    environment:
      MYSQL_HOST: ${MYSQL_HOST}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - ./mysql_database/migrations:/docker-entrypoint-initdb.d/:ro
      - mysql:/var/lib/mysql
    networks:
      - datalake
    restart: unless-stopped
  # Container OpenVPN para estabelecer conexão VPN e facilitar a integração com fontes de dados do Logstash.
  # Esse contêiner permite a configuração de uma VPN e compartilha a mesma rede com os demais serviços.
  # openvpn-client:
  #   image: kylemanna/openvpn
  #   container_name: openvpn-client
  #   cap_add:
  #     - NET_ADMIN
  #   volumes:
  #     - ./client.ovpn:/etc/openvpn/client.ovpn:ro
  #   environment:
  #     - OPENVPN_USERNAME=seu_usuario
  #     - OPENVPN_PASSWORD=sua_senha
  #   networks:
  #     - datalake
  #   restart: unless-stopped
networks:
  datalake:
    driver: bridge

volumes:
  elasticsearch:
  mysql:
